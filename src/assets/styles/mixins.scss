
$breakpoints: (
        mobile-small: 480px,
        mobile: 768px,
        tablet-min: 769px,
        tablet: 1023px,
        desktop: 1439px,
        widescreen: 1920px,
        fullhd: 1921px
);

@mixin responsive($breakpoint, $direction: max, $max-breakpoint: null) {
  // Look up the breakpoint in the map
  $size: map-get($breakpoints, $breakpoint);
  $max-size: if($max-breakpoint, map-get($breakpoints, $max-breakpoint), null);

  // Apply media query based on direction (max-width or min-width)
  @if $size {
    @if $max-size {
      @media screen and (min-width: $size) and (max-width: $max-size) {
        @content;
      }
    } @else if $direction == max {
      @media screen and (max-width: $size) {
        @content;
      }
    } @else if $direction == min {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @warn "Breakpoint `#{$breakpoint}` not found in $breakpoints map.";
  }
}

@mixin flex($direction: row, $justifyContent: flex-start, $alignItems: center, $alignSelf: center, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justifyContent;
  align-items: $alignItems;
  align-self: $alignSelf;
  gap: $gap;
}

@mixin grid($columns: repeat(auto-fill, minmax(100px, 1fr)), $rows: auto, $gap: 1rem) {
  display: grid;
  grid-template-columns: $columns;
  grid-template-rows: $rows;
  gap: $gap;
}

/* Mixin to prevent zoom on iOS with max() and declarative animation, using rem */
@mixin prevent-ios-zoom($font-size-rem) {
  // Use max() to ensure the font size is never less than 1rem (16px on most browsers)
  font-size: max($font-size-rem, 1rem);

  // Declarative animation name to prevent iOS zoom
  @keyframes prevent-ios-input-zoom {
    0% {
      font-size: 1rem;
      opacity: 0;
    }
    100% {
      font-size: var(--font-size-paragraph-l, 0.875rem); // 0.875rem = 14px
      opacity: 1;
      line-height: var(--line-height-paragraph-l, 1.5);
      letter-spacing: var(--letter-spacing-paragraph-l, 0.03125rem); // 0.03125rem = 0.5px
      text-transform: none;
      font-stretch: var(--font-stretch-normal, 100%);
      font-weight: var(--font-weight-light, 300);
    }
  }

  // Apply the animation to inputs on focus
  input[type="text"]:focus,
  input[type="password"]:focus,
  input[type="tel"]:focus,
  textarea:focus {
    animation-duration: 0.01s;
    animation-name: prevent-ios-input-zoom;
  }
}

@mixin caret-down {
  border-left: $caret-width solid transparent;
  border-right: $caret-width solid transparent;
  border-top: $caret-width solid black;
}

@mixin caret-up {
  border-left: $caret-width solid transparent;
  border-right: $caret-width solid transparent;
  border-bottom: $caret-width solid black;
}

@mixin caret-right {
  border-top: $caret-width solid transparent;
  border-bottom: $caret-width solid transparent;
  border-left: $caret-width solid black;
}

@mixin caret-left {
  border-top: $caret-width solid transparent;
  border-bottom: $caret-width solid transparent;
  border-right: $caret-width solid black;
}

@mixin caret($direction: down) {
  @if $enable-caret {
    &::after {
      display: inline-block;
      margin-left: $caret-width * .85;
      vertical-align: $caret-width * .85;
      content: "";
      @if $direction == down {
        @include caret-down;
      } @else if $direction == up {
        @include caret-up;
      } @else if $direction == right {
        @include caret-right;
      }
    }

    @if $direction == left {
      &::after {
        display: none;
      }

      &::before {
        display: inline-block;
        margin-right: $caret-width * .85;
        vertical-align: $caret-width * .85;
        content: "";
        @include caret-left;
      }
    }

    &:empty::after {
      margin-left: 0;
    }
  }
}

@mixin outline($type: solid, $color) {
  outline: 1px $type $color;
}
